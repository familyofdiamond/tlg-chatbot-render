import logging
import sqlite3
import os
import asyncio
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –õ–æ–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–∫—Ä—É–∂–µ–Ω–∏–µ
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = os.environ.get("ADMIN_ID")

# –ë–î
conn = sqlite3.connect("chat_stats.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, message_count INTEGER DEFAULT 0, language TEXT DEFAULT 'ru')")
conn.commit()

# –Ø–∑—ã–∫–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
messages = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ. –ù–∞–∂–º–∏ /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        "menu": "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "stats": "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë§ –ò–º—è: {name}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {count}",
        "name_hint": "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /setname <—Ç–≤–æ—ë –∏–º—è>",
        "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–Ø —Å–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
        "language_set": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",
        "contact_admin": "üì® –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: @{admin_username}",
    },
    "en": {
        "start": "üëã Hi! I track chat stats. Type /menu to open the menu.",
        "menu": "üìã Choose an option:",
        "stats": "üìä Your stats:\n\nüë§ Name: {name}\nüí¨ Messages: {count}",
        "name_hint": "Type /setname <your name>",
        "welcome": "üëã Welcome, {name}!\nI collect group message stats.",
        "language_set": "Language set to English üá∫üá∏",
        "contact_admin": "üì® Contact admin: @{admin_username}",
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
def get_user_language(user_id):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else "ru"

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = context.args[0].lower() if context.args else "ru"
    if lang not in ["ru", "en"]:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru, en")
        return
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (lang, user_id))
    conn.commit()
    await update.message.reply_text(messages[lang]["language_set"])

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update.effective_user.id)
    await update.message.reply_text(messages[lang]["start"])

async def setname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update.effective_user.id)
    name = " ".join(context.args)
    user_id = update.effective_user.id
    if name:
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        cursor.execute("UPDATE users SET username = ? WHERE user_id = ?", (name, user_id))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}")
    else:
        await update.message.reply_text(messages[lang]["name_hint"])

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_user_language(user_id)
    cursor.execute("SELECT username, message_count FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        name = row[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        count = row[1]
        msg = messages[lang]["stats"].format(name=name, count=count)
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

async def fullstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    cursor.execute("SELECT username, message_count FROM users ORDER BY message_count DESC")
    stats = cursor.fetchall()
    text = "\n".join([f"{u or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ‚Äî {c} —Å–æ–æ–±—â–µ–Ω–∏–π" for u, c in stats])
    await update.message.reply_text(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{text}")

async def count_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user.id, user.full_name))
    cursor.execute("UPDATE users SET message_count = message_count + 1 WHERE user_id = ?", (user.id,))
    conn.commit()

# –ú–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update.effective_user.id)
    keyboard = [
        [InlineKeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å –∏–º—è", callback_data="setname")],
        [InlineKeyboardButton("üì¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact")],
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫: RU üá∑üá∫", callback_data="lang_en") if lang == "ru"
         else InlineKeyboardButton("üåê Language: EN üá∫üá∏", callback_data="lang_ru")]
    ]
    await update.message.reply_text(
        messages[lang]["menu"],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ò–Ω–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = get_user_language(user_id)
    await query.answer()

    if query.data == "stats":
        cursor.execute("SELECT username, message_count FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            name = row[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            count = row[1]
            msg = messages[lang]["stats"].format(name=name, count=count)
            await query.message.reply_text(msg)

    elif query.data == "setname":
        await query.message.reply_text(messages[lang]["name_hint"])

    elif query.data == "contact":
        admin_username = "@SpaceBright"  # –ó–∞–º–µ–Ω–∏—Ç—å!
        await query.message.reply_text(messages[lang]["contact_admin"].format(admin_username=admin_username))

    elif query.data.startswith("lang_"):
        new_lang = query.data[-2:]
        cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (new_lang, user_id))
        conn.commit()
        await query.message.reply_text(messages[new_lang]["language_set"])

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
async def greet_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        user_id = member.id
        lang = get_user_language(user_id)
        keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="stats")]]
        msg = await update.message.reply_text(
            messages[lang]["welcome"].format(name=member.full_name),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await asyncio.sleep(30)
        try:
            await msg.delete()
        except:
            pass

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setname", setname))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("fullstats", fullstats))
    app.add_handler(CommandHandler("language", set_language))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_user))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), count_messages))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
